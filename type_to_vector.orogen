name "type_to_vector"

version "0.1"

using_library 'type_to_vector'
using_library "rtt_typelib-#{OroGen.orocos_target}"

import_types_from 'base'
import_types_from 'TypeToVectorTypes.hpp'

export_types '/type_to_vector/samples/VectorXd'

task_context "BaseTask" do
    doc "This task provides a infrastructure for processing data types as a "+
    "vector of their values. Input ports can pe added, that automatically are "+
    "converted into a vector of doubles. Vectors of multiple ports can be aranged "+
    "into one big vector. Be aware that in case of opaque types not the type itself "+
    "is converted by the intermediate type."

    needs_configuration

    dynamic_input_port(/\w+/, nil).task_trigger

    dynamic_output_port(/^debug_\d+$/, '/type_to_vector/ConvertedVector')

    operation('loadTypekit').
        returns('bool').
        argument('name', 'std/string', 'the name of the typekit that should be loaded')

    operation("addPort").
        returns('bool').
        argument("port_config", "/type_to_vector/PortConfig", "config for creation of the port").
        doc("adds Port for creation in the configureHook")

    property("debug_conversion","/bool",false).
        doc "create a debug port for a vector and sends the conversion results to it "

    property("create_places","/bool",false).
        doc "creates place information during conversion"

    property("time_fields","/std/string","time").
        doc "space seperated list of valid timestamp fields"

    property("start_time","/base/Time").
        doc "reference time to be used for not time stamped data"

    property("port_config", "std/vector</type_to_vector/PortConfig>").
        doc("Add multiple in and output ports (Optional). Same as calling addPort() multiple times.")

    property("typekits", "std/vector</std/string>").
        doc("Additional typekits to load.")

    stream_aligner do
        max_latency 0.1
    end

end

task_context "BufferedDataTask", subclasses: "BaseTask" do

    dynamic_output_port(/^debug_buffer_\d+$/, '/type_to_vector/BufferContent')

    doc "In addition to the BaseTask the data are buffered. The size of the incoming "+
        "data must not change."

    operation("setBufferSizeFromTime").
        returns("int").
        argument("delta_time", "/base/Time", "time distance between two consecutive samples").
        argument("window_start", "/base/Time", "the time the window starts from now back in time").
        argument("window_length", "/base/Time", "the lenght of the window").
        doc("computes the needed buffer length and sets the property buffer_size")

    property("buffer_size","int",1).
        doc "how many vectors can be stored in the buffer"

    property("buffer_time","bool",true).
        doc "buffers the time stamps of the vector elements as well"

    property("buffer_new_only","bool",false).
        doc "buffers only new data vs. buffer in every updatHook"

    property("debug_buffer","bool",false).
        doc "if true, a debug output port for the buffer data is created "

    output_port("buffered_samples_ratio", '/base/VectorXd').
        doc("the ratio of sample-and-hold interpolated samples")
end

deployment "type_to_vector_test" do
    do_not_install
    task('TestBaseTask','type_to_vector::BaseTask').
        periodic(0.1)
    task('TestBufferedTask','type_to_vector::BufferedDataTask').
        periodic(0.1)
    add_default_logger
end
